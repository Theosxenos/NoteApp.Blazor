@inject NotebookService NbSvc
@inject IJSRuntime JsRuntime

<div class="navbar">
	<div class="container-fluid">
		<a href="#" class="navbar-brand">Notebooks (@NbSvc.NotebookAmount) </a>
		@*<a class="nav-link flex-end fs-2" role="button" @onclick="addNoteBook">+</a>*@
		<button class="btn" type="button" @onclick="ShowDialog">+</button>
	</div>
</div>
<div class="list-group">
	@foreach (var notebook in NbSvc.GetNotebooks())
	{
		<a href="#" class="list-group-item list-group-item-action @(notebook == NbSvc.ActiveNotebook ? "active" : "")" @onclick="() => SelectNotebook(notebook)">@notebook.Name</a>
	}
</div>

<dialog @ref="dialogElement">
	<div class="container form">
		<div class="row">
			<div class="col">
				<label for="name" class="form-label">Name</label>
				<input id="name" type="text" class="form-control" @bind-value="@notebookName" placeholder="Name...">
			</div>
		</div>
		<div class="row">
			<div class="col btn-group">
				<button class="btn btn-primary" @onclick="AddNoteBook">Ok</button>
				<button class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
			</div>
		</div>
	</div>
</dialog>

@code {
	bool showDialog = false;
	ElementReference dialogElement;
	string notebookName = string.Empty;

	void AddNoteBook()
	{
		NbSvc.AddNewNotebook(notebookName);
		notebookName = string.Empty;

		CloseDialog();
	}
	
	void SelectNotebook(Notebook notebook)
	{
		if(NbSvc.ActiveNotebook == notebook) return;
		
		NbSvc.ActiveNotebook = notebook;
	}

	async void ShowDialog()
	{
		showDialog = true;
		await JsRuntime.InvokeVoidAsync("showDialog", dialogElement);
	}

	async void CloseDialog()
	{
		showDialog = false;
		await JsRuntime.InvokeVoidAsync("closeDialog", dialogElement);
	}
}
